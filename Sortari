//bucati de cod pentru tipurile de sortare

vector<int> bubble_sort(vector<int> v, int n)
{
    int m = n;
    bool ok;
    do
    {
        ok = 1;
        for(int i = 0; i < m-1; ++i)
            if(v[i] > v[i+1])
            {
                swap(v[i], v[i+1]);
                ok = 0;
            }
    } while(!ok);
    return v;
}

vector<int> count_sort(vector<int> v, int n, int Max)
{
    int f[Max+1] = {0};
    for(int i = 0; i < n; ++i) f[v[i]]++;
    vector<int> aux;
    for(int i = 0; i <= Max; ++i)
        while(f[i]--) aux.push_back(i);
    return aux;
}

void quick_sort(vector<int> &v, int st, int dr)
{
    int i = st, j = dr;
    int x = v[rand()% (dr-st+1) + st];
    while(i < j)
    {
        while(v[i] < x) i++;
        while(v[j] > x) j--;
        if(i <= j) swap(v[i++], v[j--]);
    }
    if(j > st) quick_sort(v, st, j);
    if(i < dr) quick_sort(v, i, dr);
}

void Merge(vector<int> &v, int st, int mij, int dr)
{
    int i = st, j = mij+1, l = 1;
    vector<int> aux;
    while(i <= mij && j <= dr)
        if(v[i] < v[j]) aux.push_back(v[i++]);
        else aux.push_back(v[j++]);
    while(i <= mij) aux.push_back(v[i++]);
    while(j <= dr) aux.push_back(v[j++]);
    for(int i = st; i <= dr; ++i) v[i] = aux[i-st];
}
void merge_sort(vector<int> &v, int st, int dr)
{
    if(dr > st)
    {
        int mij = (st+dr)/2;
        merge_sort(v, st, mij);
        merge_sort(v, mij+1, dr);
        Merge(v, st, mij, dr);
    }
}

void radix_sort256(vector<int> &v, int n)
{
    queue<int> q[256];
    int k;
    for(int i = 0; i <= 24; i += 8)
    {
        for(int j = 0; j < n; ++j)
            q[(v[j]>>i)&255].push(v[j]);
        k = 0;
        for(int j = 0; j <= 255 && k < n; ++j)
            while(!q[j].empty())
            {
                v[k++] = q[j].front();
                q[j].pop();
            }
    }
}
void radix_sort16(vector<int> &v, int n)
{
    queue<int> q[16];
    int k;
    for(int i = 0; i <= 24; i += 4)
    {
        for(int j = 0; j < n; ++j)
            q[(v[j]>>i)&15].push(v[j]);
        k = 0;
        for(int j = 0; j <= 15 && k < n; ++j)
            while(!q[j].empty())
            {
                v[k++] = q[j].front();
                q[j].pop();
            }
    }
}
